// Mocks generated by Mockito 5.4.3 from annotations
// in homer/test/features/backup_and_restore/presentation/bloc/backup_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:homer/core/entities/book.dart' as _i5;
import 'package:homer/core/error/failures.dart' as _i6;
import 'package:homer/core/usecase/usecase.dart' as _i11;
import 'package:homer/features/backup_and_restore/domain/usecases/add_all_books.dart'
    as _i9;
import 'package:homer/features/backup_and_restore/domain/usecases/load_backup.dart'
    as _i2;
import 'package:homer/features/backup_and_restore/domain/usecases/make_backup.dart'
    as _i8;
import 'package:homer/features/backup_and_restore/domain/usecases/purge_repo.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:multiple_result/multiple_result.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LoadBackup].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoadBackup extends _i1.Mock implements _i2.LoadBackup {
  MockLoadBackup() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<List<_i5.Book>, _i6.Failure>> call(
          _i2.RestoreParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i3.Future<_i4.Result<List<_i5.Book>, _i6.Failure>>.value(
            _i7.dummyValue<_i4.Result<List<_i5.Book>, _i6.Failure>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i3.Future<_i4.Result<List<_i5.Book>, _i6.Failure>>);
}

/// A class which mocks [MakeBackup].
///
/// See the documentation for Mockito's code generation for more information.
class MockMakeBackup extends _i1.Mock implements _i8.MakeBackup {
  MockMakeBackup() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<_i4.Unit, _i6.Failure>> call(
          _i8.BackupParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i3.Future<_i4.Result<_i4.Unit, _i6.Failure>>.value(
            _i7.dummyValue<_i4.Result<_i4.Unit, _i6.Failure>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i3.Future<_i4.Result<_i4.Unit, _i6.Failure>>);
}

/// A class which mocks [AddAllBooks].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddAllBooks extends _i1.Mock implements _i9.AddAllBooks {
  MockAddAllBooks() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<_i4.Unit, _i6.Failure>> call(
          _i9.AddAllParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i3.Future<_i4.Result<_i4.Unit, _i6.Failure>>.value(
            _i7.dummyValue<_i4.Result<_i4.Unit, _i6.Failure>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i3.Future<_i4.Result<_i4.Unit, _i6.Failure>>);
}

/// A class which mocks [PurgeRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockPurgeRepo extends _i1.Mock implements _i10.PurgeRepo {
  MockPurgeRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<_i4.Unit, _i6.Failure>> call(_i11.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i3.Future<_i4.Result<_i4.Unit, _i6.Failure>>.value(
            _i7.dummyValue<_i4.Result<_i4.Unit, _i6.Failure>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i3.Future<_i4.Result<_i4.Unit, _i6.Failure>>);
}
